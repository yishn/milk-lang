typemap = (type, l) => l.map(x => [type, x])
operatormap = typemap('operator', _)
leftdelimitermap = typemap('leftdelimiter', _)
keywordmap = typemap('keyword', _)

assignmentOp = operatormap([
    '=', '+=', '-=', '*=',
    '^=', '/=', '%='
])
comparisonOp = operatormap([
    '<=', '>=', '<', '>', '==',
    '!=', 'equals', 'not equals'
])
elementOp = operatormap([
    'in', 'instanceof', 'not in'
])
additionOp = operatormap(['+', '-'])
multOp = operatormap(['*', '/', '%'])
prepostOp = operatormap(['++', '--'])
unaryOp = operatormap(['typeof', '!'])
dotOp = operatormap(['.', '?.', '()', '?()', '[]', '?[]'])
bracketDel = leftdelimitermap(['[', '?['])

statementKeywords = keywordmap([
    'class', 'for', 'while', 'if', 'else', 'else if',
    'try', 'catch', 'return', 'throw', 'delete',
    'continue', 'pass', 'break'
])
unaryKeywords = keywordmap(['delete', 'throw', 'return'])
nullKeywords = keywordmap(['continue', 'pass', 'break'])

// Expression

function searchTokenR(*needles, hay):
    for i, token in hay:
        if needles.some(x => token[0...x.length - 1] equals x):
            return i

    return -1

function searchTokenL(*needles, hay):
    if hay.length == 0: return -1

    for i in [hay.length - 1...0]:
        if needles.some(x => hay[i][0...x.length - 1] equals x):
            return i

    return -1

function searchTokens(*needles, hay):
    r = []

    for i, token in hay:
        if needles.some(x => token equals x):
            r.push(i)

    return r

function searchMatchingDelimiter(tokens, index):
    if tokens[index][0] != 'leftdelimiter': return index

    delimiter = tokens[index][1][tokens[index][1].length - 1]
    matchingdel = { '(': ')', '[': ']', '{': '}' }
    depth = 0

    for i, [type, value] in tokens if i >= index && type in ['leftdelimiter', 'rightdelimiter']:
        if value in [delimiter, '?' + delimiter]:
            depth++
        else if value == matchingdel[delimiter]:
            depth--
        if depth == 0:
            return i

    return -1

function parseExpression(tokens, *breakerTokens):
    output = []
    placeholders = []

    // Detect delimiters
    for i in [0, 1, ..., tokens.length - 1]:
        token = tokens[i]

        if token[0] == 'delimiter'
        || token[0] == 'rightdelimiter'
        || token[0] == 'newline'
        || statementKeywords.some(x => x equals token)
        || breakerTokens.some(x => x equals token):
            // Detect end of expression
            break

        else if token[0] == 'leftdelimiter':
            // Make placeholder
            j = searchMatchingDelimiter(tokens, i)
            placeholders.push(tokens[i...j])
            output.push(['placeholder', placeholders.length - 1])
            i = j
            continue

        else if token equals ['keyword', 'function']:
            // Function closure
            [tree, len] = parseFunction(tokens[i...])
            return [tree, i + len]

        else if assignmentOp.some(x => x equals token):
            // Drop everything!
            [pattern, _] = parsePattern(tokens[0...i - 1])
            [tree, len] = parseExpression(tokens[i + 1...])

            if pattern[0] not in ['arraypattern', 'objpattern']:
                pattern = pattern[0]

            return [[token[1], pattern, tree], i + 1 + len]

        output.push(token)

    if output.length == 0:
        throw {
            message: 'Expecting an expression here',
            offset: tokens[0].offset
        }

    // Replace placeholders
    j = -1
    while ++j < output.length:
        if output[j][0] != 'placeholder': continue

        id = output[j][1]
        t = placeholders[id]
        token = t[0]

        if token equals ['leftdelimiter', '(']
        && output[j + 1] equals ['operator', '=>']:
            // Lambda head
            [tree, _] = parseLambdaHead(t)
            output[j] = tree

        else if token equals ['leftdelimiter', '(']
        && output[j - 1]?[0] in [null, 'operator', 'newline']:
            // Expression grouping
            [tree, _] = parseExpression(t[1...])
            output[j] = tree

        else if token equals ['leftdelimiter', '(']
        || token equals ['leftdelimiter', '?(']:
            // Function call
            [tree, _] = parseArray(t[1...])
            output.splice(j, 1, ['operator', token[1] + ')'], tree)
            j++

        else if token equals ['leftdelimiter', '[']
        || token equals ['leftdelimiter', '?[']:
            // Indexer or array
            indexer = output[j - 1]?[0] not in [null, 'operator', 'newline']
            [tree, _] = parseArray(t[1...])

            output[j] = tree
            if indexer:
                output.splice(j, 0, ['operator', token[1] + ']'])
                j++

        else if token equals ['leftdelimiter', '{']:
            // Object
            [tree, _] = parseObject(t[1...])
            output[j] = tree

    // Operator precedence
    if (k = searchTokenR(['operator', '=>'], output)) != -1:
        head = output[k - 1]
        if head[0] not in ['identifier', 'arraypattern']:
            throw {
                message: 'Invalid lambda arguments',
                offset: output[k].offset
            }

        [body, _] = parseExpression(output[k + 1...])

        output = ['lambda', null, head, body]

    else if (k = searchTokenR(['operator', '?'], output)) != -1:
        m = searchTokenR(['operator', ':'], output)
        if m < k: throw {
            message: "Didn't find the ':' to the '?'",
            offset: output[k].offset
        }

        [condition, _] = parseExpression(output[0...k - 1])
        [left, _] = parseExpression(output[k + 1...m - 1])
        [right, _] = parseExpression(output[m + 1...])

        output = ['?', condition, left, right]

    else if (k = searchTokenR(['operator', '??'], output)) != -1
    || (k = searchTokenL(['operator', '||'], output)) != -1
    || (k = searchTokenL(['operator', '&&'], output)) != -1:
        [left, _] = parseExpression(output[0...k - 1])
        [right, _] = parseExpression(output[k + 1...])

        output = [output[k][1], left, right]

    else if (kk = searchTokens(*comparisonOp, output)).length > 0:
        r = kk.length > 1 ? ['chaincmp'] : []

        for m, _ in kk:
            start = m >= 1 ? kk[m - 1] + 1 : 0
            [expr, _] = parseExpression(output[start...kk[m] - 1])
            r.push(expr)
            r.push(output[kk[m]][1])

        [expr, _] = parseExpression(output[kk[m] + 1...])
        r.push(expr)

        if kk.length == 1:
            output = [r[1], r[0], r[2]]
        else:
            output = r

    else if (k = searchTokenL(*elementOp, output)) != -1:
        [left, _] = parseExpression(output[0...k - 1])
        [right, _] = parseExpression(output[k + 1...])

        output = [output[k][1], left, right]

    else if (k = searchTokenL(*additionOp, output)) != -1:
        unary = output[k - 1]?[0] in [null, 'operator', 'leftdelimiter', 'delimiter']
        left = null

        if !unary: [left, _] = parseExpression(output[0...k - 1])
        [right, len] = parseExpression(output[k + 1...])

        if unary:
            output[k...k + len] = [[output[k][1], right]]
            [output, _] = parseExpression(output)
        else:
            output = [output[k][1], left, right]

    else if (k = searchTokenL(*multOp, output)) != -1:
        unary = output[k][1] == '*' && output[k - 1]?[0] in [null, 'operator', 'leftdelimiter', 'delimiter']
        left = null

        if !unary: [left, _] = parseExpression(output[0...k - 1])
        [right, len] = parseExpression(output[k + 1...])

        if unary:
            output[k...k + len] = [['spread', right]]
            [output, _] = parseExpression(output)
        else:
            output = [output[k][1], left, right]

    else if (k = searchTokenL(*prepostOp, output)) != -1:
        prevType = output[k - 1]?[0]
        nextType = output[k + 1]?[0]

        l = [null, 'newline', 'operator']
        prefix = prevType in l && nextType not in l
        postfix = nextType in l && prevType not in l

        if prefix == postfix: throw {
            message: "Ambiguous operator '" + output[k][1] + "'"
            offset: output[k].offset
        }

        if prefix:
            [subject, _] = parseExpression(output[k + 1...])
            output = [output[k][1] + '_', subject]
        else:
            [subject, _] = parseExpression(output[0...k - 1])
            output = ['_' + output[k][1], subject]

    else if (k = searchTokenL(*unaryOp, output)) != -1:
        [subject, len] = parseExpression(output[k + 1...])

        output[k...k + len] = [[output[k][1], subject]]
        [output, _] = parseExpression(output)

    else if (k = searchTokenR(['operator', '^'], output)) != -1:
        [left, _] = parseExpression(output[0...k - 1])
        [right, _] = parseExpression(output[k + 1...])

        output = ['^', left, right]

    else if (k = searchTokenR(['operator', 'new'], output)) != -1:
        [subject, len] = parseExpression(output[k + 1...])
        output[k...k + len] = [['new', subject]]
        [output, _] = parseExpression(output)

    else if (k = searchTokenL(*dotOp, output)) != -1:
        [left, _] = parseExpression(output[0...k - 1])
        [right, _] = parseExpression(output[k + 1...])

        output = [output[k][1], left, right]

    else:
        if output.length == 1: output = output[0]
        else: throw {
            message: "Expression not well-defined",
            offset: tokens[0].offset
        }

    return [output, i]

function parseLambdaHead(tokens):
    if tokens[0] equals ['leftdelimiter', '(']:
        [pattern, len] = parseArrayPattern(tokens[1...])
        return [pattern, len + 2]
    else:
        [pattern, len] = parsePattern(tokens)
        return [['arraypattern', pattern], len]

// Pattern matching

function parsePattern(tokens):
    [[type, value], ...] = tokens

    if type == 'leftdelimiter':
        if value == '[':
            [pattern, len] = parseArrayPattern(tokens[1...])
            return [pattern, len + 2]
        else if value == '{':
            [pattern, len] = parseObjectPattern(tokens[1...])
            return [pattern, len + 2]

    pointer = 0
    [expr, len] = parseExpression(tokens, ['operator', 'in'], ['operator', '='])
    pointer += len

    output = [expr, null]

    if expr[0] not in ['[]', '?[]', '.', '?.', 'identifier']
    && expr not equals ['keyword', '_']:
        throw {
            message: "Invalid pattern",
            offset: tokens[0].offset
        }

    if tokens[pointer] equals ['operator', '=']:
        pointer++
        [expr, len] = parseExpression(tokens[pointer...], ['operator', 'in'])
        pointer += len
        output[1] = expr

    return [output, pointer]

function parseArrayPattern(tokens):
    output = ['arraypattern']
    pointer = 0

    while pointer < tokens.length:
        token = tokens[pointer]

        if token[0] == 'rightdelimiter':
            break
        else if token equals ['delimiter', ',']
        || token[0] == 'newline':
            pointer++
        else if token equals ['delimiter', '...']:
            if output.some(x => x[0] == 'spread'): throw {
                message: "Invalid multiple spreads in an array pattern",
                offset: token.offset
            }

            output.push(['spread', ['keyword', '_']])
            pointer++
        else if token equals ['operator', '*']:
            [expr, len] = parsePattern(tokens[pointer + 1...])
            output.push(['spread', expr])
            pointer += len + 1
        else:
            [expr, len] = parsePattern(tokens[pointer...])
            output.push(expr)
            pointer += len

    return [output, pointer]

function parseObjectPattern(tokens):
    output = ['objpattern']
    pointer = 0

    while pointer < tokens.length:
        token = tokens[pointer]

        if token[0] == 'rightdelimiter':
            break
        else if token equals ['delimiter', ',']
        || token[0] == 'newline':
            pointer++
        else:
            [expr, end] = parseObjectPatternItem(tokens[pointer...])
            output.push(expr)
            pointer += end

    return [output, pointer]

function parseObjectPatternItem(tokens):
    output = []
    pointer = 0

    [expr, end] = parseExpression(tokens, ['operator', '='])
    output.push([expr, null])
    pointer += end

    if tokens[pointer] equals ['operator', '=']:
        pointer++
        [expr, end] = parseExpression(tokens[pointer...])
        pointer += end
        output[0][1] = expr

    if tokens[pointer] equals ['delimiter', ':']:
        pointer++
        [pattern, end] = parsePattern(tokens[pointer...])
        pointer += end
        output.push(pattern)

    if tokens[pointer] equals ['delimiter', ':']:
        throw {
            message: "Unexpected ':'",
            offset: tokens[pointer].offset
        }

    if output.length == 1:
        node = output[0][0]

        if node[0] != 'identifier': throw {
            message: "Identifier expected",
            offset: tokens[0].offset
        }

        output = [output[0], output[0]]

    return [output, pointer]

// Objects

function parseFunction(tokens):
    output = ['function']
    pointer = 1

    if tokens[pointer][0] == 'identifier':
        output.push(tokens[pointer])
        pointer++
    else:
        output.push(null)

    if tokens[pointer] equals ['leftdelimiter', '(']:
        [pattern, end] = parseArrayPattern(tokens[pointer + 1...])
        output.push(pattern)
        pointer += end + 2
    else: throw {
        message: "Expecting '('",
        offset: tokens[e].offset
    }

    [statements, end] = parseBlock(tokens[pointer...])
    output.push(statements)
    pointer += end

    return [output, pointer]

function parseArray(tokens):
    output = ['array']
    pointer = 0

    while pointer < tokens.length:
        token = tokens[pointer]

        if token[0] == 'rightdelimiter':
            break
        else if token equals ['delimiter', ',']
        || token[0] == 'newline':
            pointer++
        else if token equals ['keyword', 'for']:
            output[0] = 'arrayfor'

            [forhead, end] = parseForHead(tokens[pointer...])
            output.push(forhead)
            pointer += end
        else if token equals ['delimiter', '...']:
            output.push(token)
            pointer++
        else:
            [expr, end] = parseExpression(tokens[pointer...])
            output.push(expr)
            pointer += end

    if output.some(x => x equals ['delimiter', '...']):
        start = output[1]
        end = output[output.length - 1][0] == 'delimiter' ? null : output[output.length - 1]
        next = output[2][0] == 'delimiter' ? null : output[2]
        return [['range', start, next, end], pointer]

    if output[0] == 'arrayfor' && output[2][0] != 'for':
        throw {
            message: "Expecting 'for' directive",
            offset: tokens[0].offset
        }

    return [output, pointer]

function parseObject(tokens):
    output = ['object']
    pointer = 0

    while pointer < tokens.length:
        token = tokens[pointer]

        if token[0] == 'rightdelimiter':
            break
        else if token equals ['delimiter', ',']
        || token[0] == 'newline':
            pointer++
        else if token equals ['keyword', 'for']:
            output[0] == 'objectfor'

            [forhead, end] = parseForHead(tokens[pointer...])
            output.push(forhead)
            pointer += end
        else:
            [expr, end] = parseKeyValuePair(tokens[pointer...])
            output.push(expr)
            pointer += end

    if output[0] == 'objectfor' && output[2][0] != 'for':
        throw {
            message: "Expecting 'for' directive",
            offset: tokens[0].offset
        }

    return [output, pointer]

function parseKeyValuePair(tokens):
    output = []
    pointer = 0

    while pointer < tokens.length:
        token = tokens[pointer]

        if token[0] == 'rightdelimiter'
        || token[0] == 'newline'
        || token equals ['delimiter', ',']:
            if output.length > 2: throw {
                message: "Object literal has wrong syntax",
                offset: token.offset
            }
            break
        else if token equals ['delimiter', ':']:
            pointer++
        else:
            [expr, end] = parseExpression(tokens[pointer...])
            output.push(expr)
            pointer += end

    if output.length == 1:
        node = output[0]

        if node[0] != 'identifier': throw {
            message: "Identifier expected",
            offset: tokens[0].offset
        }

        output = [node, node]

    return [output, pointer]

// Statements

function parseBlock(tokens):
    pointer = 0

    if tokens[pointer] not equals ['delimiter', ':']:
        throw {
            message: "Expecting ':'",
            offset: tokens[pointer].offset
        }

    pointer++

    if tokens[pointer] equals ['newline', 'indent']:
        [s, len] = parseStatements(tokens[pointer...])
        return [s, pointer + len]
    else:
        [s, len] = parseStatement(tokens[pointer...])
        return [['statements', s], pointer + len]

function parseStatements(tokens):
    output = ['statements']
    depth = 0
    pointer = 0
    end = tokens.length - 1

    if tokens[0] equals ['newline', 'indent']:
        for i in [1, 2, ..., tokens.length - 1]:
            if tokens[i] equals ['newline', 'indent']:
                depth++
            else if tokens[i] equals ['newline', 'dedent']:
                depth--

            if depth < 0:
                end = i
                break

    while pointer <= end:
        if tokens[pointer][0] == 'newline':
            pointer++
            continue

        [s, len] = parseStatement(tokens[pointer...])
        if s.length != 0: output.push(s)
        pointer += len

    return [output, end]

function parseStatement(tokens):
    token = tokens[0]

    if token equals ['keyword', 'for']:
        return parseFor(tokens)
    else if token equals ['keyword', 'while']:
        return parseWhile(tokens)
    else if token equals ['keyword', 'class']:
        return parseClass(tokens)
    else if token equals ['keyword', 'if']:
        return parseIf(tokens)
    else if token equals ['keyword', 'try']:
        return parseTry(tokens)
    else if nullKeywords.some(x => x equals token):
        return [token, 1]
    else if unaryKeywords.some(x => x equals token):
        return parseUnaryKeyword(tokens)
    else if token[0] == 'keyword'
    && token not equals ['keyword', 'function']
    && statementKeywords.every(x => x not equals token):
        throw {
            message: "Unexpected '" + token[1] + "'",
            offset: token.offset
        }

    return parseExpression(tokens)

function parseUnaryKeyword(tokens):
    token = tokens[0]

    if tokens[1][0] == 'newline':
        token.push(null)
        return [token, 1]

    [expr, len] = parseExpression(tokens[1...])
    token.push(expr)
    return [token, len + 1]

function parseClass(tokens):
    pointer = 1
    output = ['class']

    if tokens[pointer][0] == 'identifier':
        output.push(tokens[pointer])
        pointer++
    else:
        throw {
            message: "Expecting class identifier",
            offset: tokens[pointer].offset
        }

    if tokens[pointer] equals ['keyword', 'extends']:
        pointer++
        [expr, len] = parseExpression(tokens[pointer...])
        output.push(expr)
        pointer += len
    else:
        output.push(null)

    [s, len] = parseBlock(tokens[pointer...])
    output.push(s)
    pointer += len

    if s[1...].some(x => x[0] != 'function'):
        throw {
            message: "Class definitions can only hold functions",
            offset: tokens[0].offset
        }

    return [output, pointer]

// Conditions

function parseTry(tokens):
    pointer = 1
    output = ['try']

    [block, len] = parseBlock(tokens[pointer...])
    output.push(block)
    pointer += len + 1

    if tokens[pointer] equals ['keyword', 'catch']:
        pointer++
        [pattern, len] = parsePattern(tokens[pointer...])
        pointer += len
        [block, len] = parseBlock(tokens[pointer...])
        pointer += len + 1
        output.push([pattern, block])
    else:
        output.push(null)

    if tokens[pointer] equals ['keyword', 'finally']:
        pointer++
        [block, len] = parseBlock(tokens[pointer...])
        pointer += len + 1
        output.push(block)
    else:
        output.push(null)

    return [output, pointer - 1]

function parseIf(tokens):
    pointer = 1
    output = ['if']

    [cond, len] = parseExpression(tokens[pointer...])
    pointer += len
    [block, len] = parseBlock(tokens[pointer...])
    pointer += len + 1
    output.push([cond, block])

    while pointer < tokens.length:
        token = tokens[pointer]

        if token equals ['keyword', 'else if']:
            pointer++
            [cond, len] = parseExpression(tokens[pointer...])
            pointer += len
            [block, len] = parseBlock(tokens[pointer...])
            pointer += len + 1
            output.push([cond, block])

        else:
            break

    if tokens[pointer] equals ['keyword', 'else']:
        pointer++
        [block, len] = parseBlock(tokens[pointer...])
        pointer += len + 1
        output.push(['else', block])

    return [output, pointer - 1]

// Loops

function parseForHead(tokens):
    pointer = 1
    [first, second, listexpr, condition] = [null, null, null, null]

    [first, len] = parsePattern(tokens[pointer...])
    pointer += len

    if tokens[pointer] equals ['delimiter', ',']:
        pointer++
        [second, len] = parsePattern(tokens[pointer...])
        pointer += len

    if tokens[pointer] equals ['operator', 'in']:
        pointer++
        [listexpr, len] = parseExpression(tokens[pointer...])
        pointer += len
    else: throw {
        message: "Expecting 'in'",
        offset: tokens[pointer].offset
    }

    if tokens[pointer] equals ['keyword', 'if']:
        pointer++
        [condition, len] = parseExpression(tokens[pointer...])
        pointer += len

    return [['for', [first, second], listexpr, condition], pointer]

function parseFor(tokens):
    [forhead, pointer] = parseForHead(tokens)
    [s, len] = parseBlock(tokens[pointer...])
    forhead.push(s)

    return [forhead, pointer + len]

function parseWhile(tokens):
    pointer = 1
    [expr, len] = parseExpression(tokens[pointer...])
    pointer += len
    [s, len] = parseBlock(tokens[pointer...])

    return [['while', expr, s], pointer + len]

module.exports = parseStatements
