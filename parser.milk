function searchToken(*needles, hay):
    for i, token in hay:
        if needles.some(x => token equals x):
            return i

    return -1

module.exports = function(tokens):
    return parseExpression(tokens)

function parseExpression(tokens):
    output = []
    depth = 0

    // Detect parentheses
    for i, token in tokens:
        if token equals ['delimiter', '(']:
            if tokens[i - 1]?[0] in [null, 'operator', 'delimiter', 'newline']:
                // Expression grouping
                [tree, i] = parseExpression(tokens[i + 1...])
                output.push(tree)
            else:
                // Call parentheses
                depth++
                output.push(token)

        else if token equals ['delimiter', ')']:
            if depth > 0:
                depth--
                output.push(token)
            else:
                // End of expression
                break

        else if token equals ['delimiter', ':']
        || token equals ['delimiter', ',']
        || token equals ['delimiter', ';']:
            // End of expression
            break

        else:
            output.push(token)

    // Group stuff
    assignmentOperators = ['=', '+=', '-=', '*=', '^=', '/=', '%='].map(x => ['operator', x])

    if (k = searchToken(*assignmentOperators, output)) != -1:
        [left, _] = parsePattern(output[0...k - 1])
        [right, _] = parseExpression(output[k + 1...])

        output = ['=', left, right]

    else if (k = searchToken(['operator', '=>'], output)) != -1:
        [left, _] = parseLambdaHead(output[0...k - 1])
        [right, _] = parseExpression(output[k + 1...])

        output = ['lambda', null, left, right]

    else if (k = searchToken(['operator', '?'], output)) != -1:
        [condition, _] = parseExpression(output[0...k - 1])
        [left, end] = parseExpression(output[k + 1...])
        [right, _] = parseExpression(output[k + 1...][end + 1...])

        output = ['?', condition, left, right]

    return [output, i]

function parsePattern(tokens):
    return tokens
