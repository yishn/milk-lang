class Graph:
    function init(vertices, edges):
        self._adjacencyList = { v: [] for v in vertices }

        for [v1, v2] in edges:
            self.addEdge(v1, v2)

    function _permute(v1, v2):
        return [[v1, v2], [v2, v1]]

    function getVertices():
        return [v for v in self._adjacencyList]

    function getNeighbors(v):
        return self._adjacencyList[v]?.slice?(0)

    function addEdge(v1, v2):
        if self.hasEdge(v1, v2): return
        for [x, y] in self._permute(v1, v2):
            self._adjacencyList[x].push(y)

    function hasEdge(v1, v2):
        return v2 in self._adjacencyList[v1]

    function removeEdge(v1, v2):
        for [x, y] in self._permute(v1, v2):
            self._adjacencyList[x] = self._adjacencyList[x].filter(x => x != y)

    function addVertex(v):
        if v not in self._adjacencyList:
            self._adjacencyList[v] = []

    function hasVertex(v):
        return v in self._adjacencyList

    function removeVertex(v):
        for w in self.getNeighbors(v):
            self.removeEdge(v, w)

        delete self._adjacencyList[v]

class Labyrinth extends Graph:
    function init(width, height):
        vertices = [[x, y] for x in [1...width] for y in [1...height]]
        edges = [[v, w] for v in vertices for w in vertices if self.distance(v, w) == 1]

        super.init(vertices, edges)

    function distance([x1, y1], [x2, y2]):
        return Math.abs(x1 - x2) + Math.abs(y1 - y2)

labyrinth = new Labyrinth(10, 5)
console.log(labyrinth.getNeighbors([3, 3]))
console.log(labyrinth.getVertices())
