exports.offsetToLinePos = function(offset, input):
    lines = [x + '\n' for x in input.split('\n')]

    function navigate(pos, step):
        [row, col] = pos

        if col + step >= 0 && col + step < lines[row].length:
            return [row, col + step]
        else if col + step < 0 && row > 0:
            pos = [row - 1, lines[row - 1].length - 1]
            return navigate(pos, col + step + 1)
        else if col + step >= lines[row].length && row + 1 < lines.length:
            pos = [row + 1, 0]
            return navigate(pos, col + step - lines[row].length)
        else:
            [..., l] = lines
            return [lines.length - 1, l.length - 1]

    return navigate([0, 0], offset, lines).map(x => x + 1)

exports.commentate = function(js, milk, comments):
    lastReportedLine = -5
    lines = js.split('\n')

    for [_, comment] in comments:
        if comment.indexOf('#') != 0: break
        lines = [comment, *lines]

    for i, line in lines:
        if line.trim().indexOf('//OFFSET') != 0: continue

        offset = parseInt(line.trim().replace('//OFFSET', ''), 10)
        indent = line.match(/^\s*/)[0]
        [row, col] = exports.offsetToLinePos(offset, milk)
        lines[i] = ''

        if i - lastReportedLine > 5:
            lines[i] = indent + '/*@' + row + ':' + col + '*/'
            lastReportedLine = i

        while comments.length > 0 && comments[0].offset <= offset:
            lines[i] += '\n' + indent + comments[0][1]
            comments.splice(0, 1)

    return lines.filter(x => x != '').join('\n')
