exports.offsetToLinePos = function(offset, input):
    lines = [x + '\n' for x in input.split('\n')]

    navigate = function(pos, step):
        [row, col] = pos

        if col + step >= 0 && col + step < lines[row].length:
            return [row, col + step]
        else if col + step < 0 && row > 0:
            pos = [row - 1, lines[row - 1].length - 1]
            return navigate(pos, col + step + 1)
        else if col + step >= lines[row].length && row + 1 < lines.length:
            pos = [row + 1, 0]
            return navigate(pos, col + step - lines[row].length)
        else:
            [..., l] = lines
            return [lines.length - 1, l.length - 1]

    return navigate([0, 0], offset, lines).map(x => x + 1)

exports.replaceOffsets = function(js, milk):
    function replaceOffsetLine(line):
        if line.trim().indexOf('//OFFSET') != 0:
            return line

        offset = parseInt(line.trim().replace('//OFFSET', ''), 10)
        [row, col] = exports.offsetToLinePos(offset, milk)
        return /^\s*/.exec(line)[0] + '/*@' + row + ':' + col + '*/'

    return js.split('\n').map(replaceOffsetLine).join('\n')
