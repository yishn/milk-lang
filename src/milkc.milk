app = require('../package.json')
process = require('process')
fs = require('fs')
path = require('path')
minimist = require('minimist')
helper = require('./helper')
milk = require('./milk')

argv = minimist(process.argv[2...], {
    string: ['o'],
    boolean: ['b', 'h', 'v', 'w']
})

endsWithMilk = filename => path.extname(filename) == '.milk'
replaceMilk = filename => filename[0 ... filename.length - 6] + '.js'

function readdirRecursive(p):
    items = fs.readdirSync(p).map(x => path.join(p, x))

    for i, item in items if fs.statSync(item).isDirectory():
        items = items.concat(readdirRecursive(item))

    return items.filter(x => fs.statSync(x).isFile())

function compile(file):
    [data, output] = [null, null]
    try:
        data = fs.readFileSync(file, 'utf-8')
    catch:
        console.error('File cannot be read.')
        return

    console.error('Compiling ' + path.basename(file) + '...')

    try:
        output = milk.compile(data, {
            wrapper: !argv.b
        })
    catch {message, offset}:
        [row, col] = helper.offsetToLinePos(offset, data)
        console.error(message + ' @' + row + ':' + col)
        return

    if deststats == null:
        console.log(output)
    else:
        dir = p
        if stats.isFile(): dir = path.dirname(p)
        milkfile = (replaceMilk @ path.join)(argv.o, path.relative(dir, file))

        fs.writeFileSync(milkfile, output)

// Main

[p = './', ...] = argv._
[stats, deststats] = [fs.statSync(p), argv.o ? fs.statSync(argv.o) : null]
files = []

if argv.h:
    console.log([
        'Usage: milkc [options] [path]'
        ''
        '[path] can be a Milk file or a directory. If [path] is not specified,'
        '`milkc` will use the current directory.'
        ''
        ['', '-b      ', 'compile without a top-level function wrapper'].join('    ')
        ['', '-h      ', 'display this help message'].join('    ')
        ['', '-o [dir]', 'set the output directory for compiled JavaScript'].join('    ')
        ['', '-v      ', 'display the version number'].join('    ')
        ['', '-w      ', 'watch Milk scripts for changes and rerun commands'].join('    ')
    ].join('\n'))
    return

if argv.v:
    console.log([app.productName, 'version', app.version].join(' '))
    return

if deststats != null && !deststats.isDirectory():
    console.error('Invalid output.')
    return

if !argv.w:
    if stats.isFile():
        files = [p]
    else if stats.isDirectory():
        files = readdirRecursive(p).filter(endsWithMilk)
    else:
        console.error('Invalid input.')
        return

    for i, file in files:
        compile(file)
        percent = Math.round((i + 1) * 100 / files.length)
        console.error(percent + '%')

else:
    lasttime = new Date()

    function callback(event, file):
        if !endsWithMilk(file)
        || event != 'change'
        || new Date() - lasttime <= 1000:
            return

        lasttime = new Date()
        compile(path.join(p, file))
        console.error('Done.')

    fs.watch(p, { recursive: true }, callback)
