// -*- javascript -*-

escaperegex = x => x.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
regexmap = l => l.map(x => new RegExp('^' + escaperegex(x)))

function gcd(*args):
    if args.length <= 1: return args[0] ?? 1

    gcdInner = (a, b) => b == 0 ? a : gcdInner(b, a % b)

    middle = Math.floor((args.length - 1) / 2)
    return gcdInner(gcd(*args[0...middle]), gcd(*args[middle + 1...]))

function removeNewline(tokens, i):
    if tokens[i] equals ['newline', 'nodent']:
        tokens[i] = null
        return

    depth = 0
    for k, token in tokens if k >= i && token != null:
        [type, value] = token
        if type != 'newline': continue

        if value == 'indent': depth++
        else if value == 'dedent': depth--

        if k == i:
            tokens[k] = null
        else if depth == 0:
            tokens[k] = ['newline', 'nodent']
            return

rules = {
    operator: regexmap([
        '*', '/', '^', '%', '-', '+', '@', '|'
        '=', '--', '++', '+=', '*=', '%=', '-=', '/='
        '=>', '??', '?'
        '||', '&&', '!'
        '<', '>', '<=', '>=', '==', '!='
        'in', 'not in', 'instanceof', 'typeof', 'new'
        'equals', 'not equals'
        '.', '?.'
    ]).concat([/^\s+:\s+/]),

    delimiter: regexmap([
        ';', ',', ':', '...'
    ]),

    leftdelimiter: regexmap([
        '(', '?(', '[', '?[', '{'
    ]),

    rightdelimiter: regexmap([
        ')', ']', '}'
    ])

    newline: [
        /^\n[^\S\n]*/
    ],

    bool: regexmap([
        'true'
        'false'
    ]),

    keyword: regexmap([
        '_', 'pass', 'equals',
        'null', 'undefined', 'not', 'true', 'false', 'arguments',
        'export', 'import', 'void', 'debugger', 'with',
        'delete', 'var', 'let', 'const', 'typeof',
        'new', 'class', 'extends', 'this', 'self', 'super',
        'return', 'yield', 'function',
        'if', 'else', 'else if',
        'switch', 'case', 'default',
        'do', 'while', 'break', 'continue',
        'for', 'in', 'of', 'instanceof',
        'try', 'catch', 'finally', 'throw',
        'enum', 'implements', 'static', 'public', 'package',
        'interface', 'protected', 'private', 'abstract', 'final',
        'native', 'boolean', 'float', 'short', 'byte',
        'goto', 'synchronized', 'char', 'int', 'transient', 'double',
        'long', 'volatile'
    ]),

    identifier: [
        /^[a-zA-Z_$][0-9a-zA-Z_$]*/
    ],

    number: [
        /^[0-9]+/
        /^[0-9]*\.[0-9]+/
        /^0x[0-9a-fA-F]+/
    ],

    string: [
        /^"([^"\\]|\\.)*"/
        /^'([^'\\]|\\.)*'/
    ],

    regex: [
        /^\/([^\/\\]|\\.)+\/[gim]*/
    ],

    comment: [
        /^\/\/.*/
        /^#.*/
        /^\/\*[^]*?\*\//
    ],

    ignore: [
        /^[^\S\n]+/
        /^#[A-Z]+/
    ]
}

exports.tokenize = function(input):
    [residue, offset] = [input, 0]
    tokens = []

    // Tokenizer
    while residue.length > 0:
        lastType = null
        [type, value] = [null, '']
        if tokens.length > 0: [..., [lastType, _]] = tokens

        for t, list in rules:
            // Check whether regex or division
            if t == 'regex'
            && lastType not in ['keyword', 'operator', 'leftdelimiter', 'delimiter', 'newline', null]:
                continue

            for regex in list:
                matches = regex.exec(residue)
                if matches == null || matches[0].length <= value.length:
                    continue

                [type, value] = [t, matches[0]]

        // No token found
        if type == null: throw {
            message: "Syntax error: Unexpected '" + residue[0] + "'",
            offset: offset
        }

        // Don't add newline twice
        if type == 'newline' && tokens.length > 0 && tokens[tokens.length - 1][0] == 'newline':
            tokens.pop()

        if type != 'ignore':
            token = [type, value.trim()]
            if token[1] == '': token[1] = value
            token.offset = offset
            tokens.push(token)

        offset += value.length
        residue = residue[value.length...]

    output = []

    // Detect indents & dedents
    indents = [x.length - 1 for [t, x] in tokens if t == 'newline']
    indentLength = gcd(*indents.filter(x => x != 0))
    [lastDepth, useTabs] = [0, null]

    for i, [type, value] in tokens:
        if type != 'newline':
            output.push(tokens[i])
            continue

        depth = (value.length - 1) / indentLength

        if depth != 0:
            // Check for mixed indentation
            if useTabs == null:
                useTabs = '\t' in value
            else if useTabs != ('\t' in value):
                throw {
                    message: 'Mixed indentation',
                    offset: tokens[i].offset
                }

        if depth != lastDepth:
            for _ in [1, 2, ..., Math.abs(depth - lastDepth)]:
                token = ['newline', depth > lastDepth ? 'indent' : 'dedent']
                token.offset = tokens[i].offset
                output.push(token)
        else:
            output.push(['newline', 'nodent'])

        lastDepth = depth

    for i in [1, 2 ... lastDepth]:
        output.push(['newline', 'dedent'])

    // Remove superfluous newlines
    for i, token in output if token?[0] == 'operator':
        if token[1] in ['++', '--', 'typeof', 'new']:
            continue

        if output[i - 1]?[0] == 'newline' && output[i - 1]?[1] != 'dedent':
            removeNewline(output, i - 1)
        if output[i + 1]?[0] == 'newline' && output[i + 1]?[1] != 'dedent':
            removeNewline(output, i + 1)

    indent = [useTabs ? '\t' : ' ' for _ in [1...indentLength]].join('')
    return [output.filter(x => x != null), indent]
